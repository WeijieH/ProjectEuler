'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
from math import sqrt
from sympy import primerange


def highly_divisible_triangular_number(number_of_divisors, primes):
    num = minimal_number_with_n_divisors(number_of_divisors, primes)
    if num == 0:
        return 0   
    s = next_triangle_number(num)
    while True:
        n = get_triangle_number(s)
        _, powers = get_divisors(n, primes)
        if powers ==[]:
            return 0
        x = 1        
        for d in powers:
            x *= (d + 1)
        if x > number_of_divisors:
            break
        s += 1
    return n


def minimal_number_with_n_divisors(number_of_divisors, primes):
    divisors, powers = get_divisors(number_of_divisors, primes)
    result = 1
    p = 2
    index = 0
    index_max = len(primes) - 1
    for i in range(1, len(divisors) + 1):
        for j in range(0, powers[-i]):
            if index > index_max:
                return 0
            p = primes[index]
            result *= (p**(divisors[-i] - 1)) 
            index += 1  
    return result

def next_triangle_number(number):
    return int((sqrt(1 + 8*number) - 1)/2) + 1

def get_triangle_number(n):
    return (n*n + n)//2

def get_divisors(number, primes):
    divisors = []
    power_of_divisors = []
    n = number
    for i in range(0, len(primes)):
        p = primes[i]
        power = 0
        while n % p == 0:
            n = n // p
            power += 1
        if power > 0:
            power_of_divisors.append(power)
            divisors.append(p)
    return divisors, power_of_divisors


primes = list(primerange(0, 10000))
print(highly_divisible_triangular_number(500, primes))
